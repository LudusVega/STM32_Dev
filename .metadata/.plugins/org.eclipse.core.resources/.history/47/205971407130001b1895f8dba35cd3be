/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Sep 26, 2020
 *      Author: jsnyder
 */

#include <stm32f4xx_gpio_driver.h>
#include "stm32f407xx.h"

/*************************************************************
 *
 * @in			- GPIO_PeriClockControl
 *
 * @brief		- Peripheral Clock Setup
 *
 * @parm[in]	- base address of the GPIO peripheral
 * @parm[in]	- ENABLE or DISABLE macros
 * @parm[in]
 *
 * @return		- none
 *
 * @Note 		- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EorD)
{
	if (EorD == ENABLE)
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_CLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_CLK_EN();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_CLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_CLK_EN();
		}
		else if (pGPIOx == GPIOE)
				{
			GPIOF_CLK_EN();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOG_CLK_EN();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOH_CLK_EN();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_CLK_EN();
		}
		else if (pGPIOx == GPIOI)
		{
			GPIOI_CLK_EN();
		}
	}

	else
	{

		if (pGPIOx == GPIOA)
				{
					GPIOA_CLK_DIS();
				}
		else if (pGPIOx == GPIOB)
				{
					GPIOB_CLK_DIS();
				}
		else if (pGPIOx == GPIOC)
				{
					GPIOC_CLK_DIS();
				}
		else if (pGPIOx == GPIOD)
				{
					GPIOD_CLK_DIS();
				}
		else if (pGPIOx == GPIOE)
				{
					GPIOE_CLK_DIS();
				}
		else if (pGPIOx == GPIOF)
				{
					GPIOF_CLK_DIS();
				}
		else if (pGPIOx == GPIOG)
				{
					GPIOG_CLK_DIS();
				}
		else if (pGPIOx == GPIOH)
				{
					GPIOH_CLK_DIS();
				}
		else if (pGPIOx == GPIOI)
				{
					GPIOI_CLK_DIS();
				}
	}

}


 /*************************************************************
 *
 * @in			- GPIO_Init
 *
 * @brief		- Initialize and DeInitialize Peripheral
 *
 * @parm[in]	- pointer value of GPIOHandle
 *
 * @return		- none
 *
 * @Note 		- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp=0;

	//1. configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle ->pGPIOx ->MODER &=  ~(0x3 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOHandle ->pGPIOx ->MODER |= temp;
	}
	else
	{
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
	{
		//1. Configure the FTSR
		EXTI ->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		//CLEAR RSTR BIT
		EXTI ->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	}
	else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
	{
		//2. Configure the RTSR
		EXTI ->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		//CLEAR FSTR BIT
		EXTI ->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	}
	else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
	{
		//3. Configure the BOTH FTSR and RTSR
		EXTI ->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		//CLEAR RSTR BIT
		EXTI ->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	}

	// 2. Config the gpio port selection in SYSCFG_EXTICR

	 //3.enable the exti interupt delivery using the IMR

	//4. Configure the GPIO port selection in SYSCFG_EXTICR
	//5. Enable the EXTI interrupt delivery using IMR

	}
	temp = 0;

	//2. configure the speed of gpio output

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle -> pGPIOx ->OSPEEDR &=  ~(0x3 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOHandle -> pGPIOx ->OSPEEDR |= temp;

	temp = 0;

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle -> pGPIOx ->PUPDR &=  ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOHandle -> pGPIOx ->PUPDR |= temp;

	temp = 0;


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOHandle -> pGPIOx ->OTYPER &=  ~(0x1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOHandle -> pGPIOx ->OTYPER |= temp;


	temp = 0;
	//5. Configure alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle ->pGPIOx ->AFR[temp1] &= ~(0xF << (4 * temp2));
		pGPIOHandle ->pGPIOx ->AFR[temp1] |= (pGPIOHandle ->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));

	}
}

/*************************************************************
*
* @in			- GPIO_DeInit
*
* @brief		- DeInitialize Peripheral
*
* @parm[in]		- Base Address of GPIO Peripheral
*
* @return		- none
*
* @Note 		- none
*
*/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	if (pGPIOx == GPIOA)
	{
		GPIOA_REG_RESET();
	}
	else if (pGPIOx == GPIOB)
	{
		GPIOB_REG_RESET();
	}
	else if (pGPIOx == GPIOC)
	{
		GPIOC_REG_RESET();
	}
	else if (pGPIOx == GPIOD)
	{
		GPIOD_REG_RESET();
	}
	else if (pGPIOx == GPIOE)
	{
		GPIOF_REG_RESET();
	}
	else if (pGPIOx == GPIOF)
	{
		GPIOG_REG_RESET();
	}
	else if (pGPIOx == GPIOG)
	{
		GPIOH_REG_RESET();
	}
	else if (pGPIOx == GPIOH)
	{
		GPIOH_REG_RESET();
	}
	else if (pGPIOx == GPIOI)
	{
		GPIOI_REG_RESET();
	}
}

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);

	return value;
}
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;

	return value;
return 0;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	if(Value == GPIO_PIN_SET)
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx ->ODR |+ (1 << PinNumber);
	}else
	{
		pGPIOx ->ODR &= ~(1 << PinNumber);
	}
}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx -> ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	pGPIOx ->ODR ^= (1 << PinNumber);
}

/*
 * Interrupt request configuration and handling
 */

void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EorD)
{

}
void GPIO_IRQHandling(uint8_t PinNumber)
{

}
