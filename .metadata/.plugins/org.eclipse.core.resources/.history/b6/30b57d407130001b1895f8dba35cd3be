 /*
 * stm32f407g.h
 *
 *  Created on: Sep 24, 2020
 *      Author: jsnyder
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_
#include <stdint.h>


#define __vo volatile
/*
 * base addresses of flash and SRAM memories
 */

#define FLASH_BASEADDR			0x08000000		/* base address of FLASH memory */
#define SRAM_BASEADDR			0x20000000		/* base address of SRAM memory */
#define SRAM2_BASEADDR			0x2001C000		/* base address of SRAM2 memory */
#define ROM						0x1FFF0000		/* base address of ROM memory */
#define SRAM 					SRAM1_BASEADDR

/*
 * AHBx and APBx Bus Peripheral base addresses
 */

#define PERIPH_BASE				0x40000000U
#define APB1PERIPH_BASE			PERIPH_BASE
#define APB2PERIPH_BASE			0x40010000U
#define AHB1PERIPH_BASE			0x40020000U
#define AHB2PERIPH_BASE			0x50010000U

/* Base addresses of peripherals which are hanging on AHB1 Bus
 * todo: complete for all other peripherals
 */

#define GPIOA_BASEADDR			(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR			(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR			(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR			(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR			(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR			(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR			(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR			(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASEADDR			(AHB1PERIPH_BASE + 0x2000)
#define GPIOJ_BASEADDR			(AHB1PERIPH_BASE + 0x2400)
#define GPIOK_BASEADDR			(AHB1PERIPH_BASE + 0x2800)
#define CRC_BASEADDR			(AHB1PERIPH_BASE + 0x3000)
#define RCC_BASEADDR			(AHB1PERIPH_BASE + 0x3800)
#define FLASHINT_BASEADDR		(AHB1PERIPH_BASE + 0x3C00)
#define BKPSRAM_BASEADDR		(AHB1PERIPH_BASE + 0x4000)
#define DMA1_BASEADDR			(AHB1PERIPH_BASE + 0x6000)
#define DMA2_BASEADDR			(AHB1PERIPH_BASE + 0x6400)
#define ETHERNETMAC_BASEADDR	(AHB1PERIPH_BASE + 0x8000)
#define DMA2D_BASEADDR			(AHB1PERIPH_BASE + 0xB000)
#define USBOTGHS_BASEADDR		0x40040000U


/* Base addresses of peripherals which are hanging on APB1 Bus
 * todo: complete for all other peripherals
 */

#define TIM2_BASEADDR			(APB1PERIPH_BASE + 0x0000)
#define TIM3_BASEADDR			(APB1PERIPH_BASE + 0x0400)
#define TIM4_BASEADDR			(APB1PERIPH_BASE + 0x0800)
#define TIM5_BASEADDR			(APB1PERIPH_BASE + 0x0C00)
#define TIM6_BASEADDR			(APB1PERIPH_BASE + 0x1000)
#define TIM7_BASEADDR			(APB1PERIPH_BASE + 0x1400)
#define TIM12_BASEADDR			(APB1PERIPH_BASE + 0x1800)
#define TIM13_BASEADDR			(APB1PERIPH_BASE + 0x1C00)
#define TIM14_BASEADDR			(APB1PERIPH_BASE + 0x2000)
#define RTC_BKP_BASEADDR		(APB1PERIPH_BASE + 0x2800)
#define WWDG_BASEADDR			(APB1PERIPH_BASE + 0x2C00)
#define IWDG_BASEADDR			(APB1PERIPH_BASE + 0x3000)
#define I2S2EXT_BASEADDR		(APB1PERIPH_BASE + 0x3400)
#define SPI2_I2S2_BASEADDR		(APB1PERIPH_BASE + 0x3800)
#define SPI3_I2S3_BASEADDR		(APB1PERIPH_BASE + 0x3C00)
#define I2S3EXT_BASEADDR		(APB1PERIPH_BASE + 0x4000)
#define USART2_BASEADDR			(APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR			(APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR			(APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR			(APB1PERIPH_BASE + 0x5000)
#define I2C1_BASEADDR			(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR			(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR			(APB1PERIPH_BASE + 0x5C00)
#define CAN_1_BASEADDR			(APB1PERIPH_BASE + 0x6400)
#define CAN_2_BASEADDR			(APB1PERIPH_BASE + 0x6800)
#define PWR_BASEADDR			(APB1PERIPH_BASE + 0x7000)
#define DAC_BASEADDR			(APB1PERIPH_BASE + 0x7400)
#define UART7_BASEADDR			(APB1PERIPH_BASE + 0x7800)
#define UART8_BASEADDR			(APB1PERIPH_BASE + 0x7C00)

/* Base addresses of peripherals which are hanging on APB2 Bus
 * todo: complete for all other peripherals
 */

#define TIM1_BASEADDR			{APB2PERIPH_BASE + 0x0000}
#define TIM8_BASEADDR			{APB2PERIPH_BASE + 0x0400}
#define USART1_BASEADDR			{APB2PERIPH_BASE + 0x1000}
#define USART6_BASEADDR			{APB2PERIPH_BASE + 0x1400}
#define ADC123_BASEADDR			{APB2PERIPH_BASE + 0x2000}
#define SDIO_BASEADDR			{APB2PERIPH_BASE + 0x2C00}
#define SPI1_BASEADDR			{APB2PERIPH_BASE + 0x3000}
#define SPI4_BASEADDR			{APB2PERIPH_BASE + 0x3400}
#define SYSCFG_BASEADDR			{APB2PERIPH_BASE + 0x3800}
#define EXTI_BASEADDR			{APB2PERIPH_BASE + 0x3C00}
#define TIM9_BASEADDR			{APB2PERIPH_BASE + 0x4000}
#define TIM10_BASEADDR			{APB2PERIPH_BASE + 0x4400}
#define TIM11_BASEADDR			{APB2PERIPH_BASE + 0x4800}
#define SPI5_BASEADDR			{APB2PERIPH_BASE + 0x5000}
#define SPI6_BASEADDR			{APB2PERIPH_BASE + 0x5400}
#define SAI1_BASEADDR			{APB2PERIPH_BASE + 0x5800}
#define LCD_TFT_BASEADDR		{APB2PERIPH_BASE + 0x6800}

/*
 * Peripheral register details Structures
 */

typedef struct
{
	__vo uint32_t MODER;		//GPIO Port Mode register
	__vo uint32_t OTYPER;		//GPIO port output type register (GPIOx_OTYPER) (x = A..I/J/K) (push-pull or open drain + pull-up/down)
	__vo uint32_t OSPEEDR;		//GPIO port output speed register (GPIOx_OSPEEDR) (x = A..I/J/K) (00 Low, 01 Medium, 10 high, 11 Very high)
	__vo uint32_t PUPDR;		//GPIO port pull-up/pull-down register (GPIOx_PUPDR) (x = A..I/J/K) (00 No Pull-up/Pull down, 01 Pull-up, 10 Pull-down, 11 Reserved)
	__vo uint32_t IDR;			//GPIO port input data register (GPIOx_IDR) (x = A..I/J/K)Data = bits 0-15, reserved bits 16-31
	__vo uint32_t ODR;			//GPIO port output data register (GPIOx_ODR) (x = A..I/J/K)Data = bits 0-15
	__vo uint32_t BSRR;			//GPIO port bit set/reset register (GPIOx_BSRR) (x = A..I/J/K) bits 0-15 are "set bits", 6-31 are reset
	__vo uint32_t LCKR;			//GPIO port configuration lock register (GPIOx_LCKR) (x = A..I/J/K)
	__vo uint32_t AFR[2];		//GPIO alternate function low register (GPIOx_AFRL) (x = A..I/J/K) Use bits 0..7, AF0 = 0000 through AF15 1111
}GPIO_RegDef_t;

/*
 * Periferal register Structure for EXTI
 *
 */
typedef struct
{
	__vo uint32_t IMR;
	__vo uint32_t EMR;
	__vo uint32_t RTSR;
	__vo uint32_t FTSR;
	__vo uint32_t SWIER;
	__vo uint32_t PR;

}EXTI_RegDef_t;


typedef struct
{
	__vo uint32_t CR; 			//RCC clock control register
	__vo uint32_t PLLCFGR; 		//RCC PLL configuration register
	__vo uint32_t CFGR; 		//RCC clock configuration register
	__vo uint32_t CIR; 			//RCC clock interrupt register
	__vo uint32_t AHB1RSTR; 	//RCC AHB1 peripheral reset register
	__vo uint32_t AHB2RSTR; 	//RCC AHB2 peripheral reset register
	__vo uint32_t AHB3RSTR;
	uint32_t	  RESERVED0;//RCC AHB3 peripheral reset register
	__vo uint32_t APB1RSTR; 	//RCC APB1 peripheral reset register
	__vo uint32_t APB2RSTR; 	//RCC APB2 peripheral reset register
	uint32_t	  RESERVED1[2];
	__vo uint32_t AHB1ENR;		//RCC AHB1 peripheral clock enable register
	__vo uint32_t AHB2ENR;		//RCC AHB2 peripheral clock enable register
	__vo uint32_t AHB3ENR;		//RCC AHB3 peripheral clock enable register
	uint32_t	  RESERVED2;
	__vo uint32_t APB1ENR;		//RCC AHB3 peripheral clock enable register
	__vo uint32_t APB2ENR;		//RCC AHB3 peripheral clock enable register
	uint32_t	  RESERVED3[2];
	__vo uint32_t AHB1LPENR;	//RCC AHB1 peripheral clock enable in low power mode register
	__vo uint32_t AHB2LPENR;	//RCC AHB2 peripheral clock enable in low power mode register
	__vo uint32_t AHB3LPENR;	//RCC AHB3 peripheral clock enable in low power mode register
	__vo uint32_t APB1LPENR;	//RCC APB1 peripheral clock enable in low power mode register
	__vo uint32_t APB2LPENR; 	//RCC APB2 peripheral clock enable in low power mode register
	__vo uint32_t BDCR; 		//RCC Backup domain control register
	__vo uint32_t CSR; 			//RCC clock control & status register
	__vo uint32_t SSCGR; 		//RCC spread spectrum clock generation register
	__vo uint32_t PLLI2SCFGR; 	//RCC PLLI2S configuration register
}RCC_RegDef_t;



/*
 * Peripheral definitions (Peripheral base addresses typecasted onto xxx_RegDef_t)
 */
#define GPIOA					((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB					((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC					((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD					((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE					((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF					((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG					((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH					((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI					((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC						((RCC_RegDef_t*)RCC_BASEADDR)

#define EXTI					((EXTI_RegDef_t*)EXTI_BASEADDR)

/*
 * Clock Enable Macros for GPIOx Peripherals
 */
#define GPIOA_CLK_EN()			(RCC->AHB1ENR |= (1 << 0) )
#define GPIOB_CLK_EN()			(RCC->AHB1ENR |= (1 << 1) )
#define GPIOC_CLK_EN()			(RCC->AHB1ENR |= (1 << 2) )
#define GPIOD_CLK_EN()			(RCC->AHB1ENR |= (1 << 3) )
#define GPIOE_CLK_EN()			(RCC->AHB1ENR |= (1 << 4) )
#define GPIOF_CLK_EN()			(RCC->AHB1ENR |= (1 << 5) )
#define GPIOG_CLK_EN()			(RCC->AHB1ENR |= (1 << 6) )
#define GPIOH_CLK_EN()			(RCC->AHB1ENR |= (1 << 7) )
#define GPIOI_CLK_EN()			(RCC->AHB1ENR |= (1 << 8) )
/*
 * Clock Disable Macros for GPIOx Peripherals
 *
 */
#define GPIOA_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 0) )
#define GPIOB_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 1) )
#define GPIOC_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 2) )
#define GPIOD_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 3) )
#define GPIOE_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 4) )
#define GPIOF_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 5) )
#define GPIOG_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 6) )
#define GPIOH_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 7) )
#define GPIOI_CLK_DIS()			(RCC->AHB1RSTR |= (1 << 8) )
/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1<<0)); }while(0)
#define GPIOB_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1<<1)); }while(0)
#define GPIOC_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1<<2)); }while(0)
#define GPIOD_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1<<3)); }while(0)
#define GPIOE_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1<<4)); }while(0)
#define GPIOF_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1<<5)); }while(0)
#define GPIOG_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1<<6)); }while(0)
#define GPIOH_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1<<7)); }while(0)
#define GPIOI_REG_RESET()		do{ (RCC->AHB1RSTR |= (1 << 8)); (RCC->AHB1RSTR &= ~(1<<8)); }while(0)
/*
 * Clock Enable Macros for I2Cx Peripherals
 */
#define I2C1_CLK_EN()			(RCC->APB1ENR |= (1 << 21) )
#define I2C2_CLK_EN()			(RCC->APB1ENR |= (1 << 22) )
#define I2C3_CLK_EN()			(RCC->APB1ENR |= (1 << 23) )
/*
 * Clock Enable Macros for SPIX Peripherals
 */
#define SPI1_CLK_EN()			(RCC->APB2ENR |= (1 << 12) )
#define SPI2_CLK_EN()			(RCC->APB1ENR |= (1 << 14) )
#define SPI3_CLK_EN()			(RCC->APB1ENR |= (1 << 15) )
/*
 * Clock Enable Macros for USART/UART Peripherals
 */
#define USART1_CLK_EN()			(RCC->APB2ENR |= (1 << 4) )
#define USART2_CLK_EN()			(RCC->APB1ENR |= (1 << 17) )
#define USART3_CLK_EN()			(RCC->APB1ENR |= (1 << 18) )
#define UART4_CLK_EN()			(RCC->APB1ENR |= (1 << 19) )
#define UART5_CLK_EN()			(RCC->APB1ENR |= (1 << 20) )
#define USART6_CLK_EN()			(RCC->APB2ENR |= (1 << 5) )
/*
 * Clock Enable Macros for CANx Peripherals
 */
#define CAN1_CLK_EN()			(RCC->APB1ENR |= (1 << 25) )
#define CAN2_CLK_EN()			(RCC->APB1ENR |= (1 << 26) )

#define ENABLE 					1
#define DISABLE 				0
#define SET 					ENABLE
#define RESET 					DISABLE

#define GPIO_PIN_SET			SET
#define GPIO_PIN_RESET			RESET

#include "stm32f4xx_gpio_driver.h"

#endif  /*INC_STM32F407G_H*/
